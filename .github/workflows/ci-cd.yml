name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, dev ]
  pull_request:
    branches: [ master, main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pylint flake8
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short

    - name: Run flake8
      run: |
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Run pylint
      run: |
        pylint src/ tests/ --disable=C0114,C0115,C0116
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')) ||
      (github.event_name == 'pull_request' && (github.base_ref == 'master' || github.base_ref == 'main'))
    steps:
    - uses: actions/checkout@v3
    
    - name: Validate Docker Hub credentials
      id: docker-check
      run: |
        echo "Checking Docker Hub credentials..."
        
        if [ -n "$DOCKERHUB_USERNAME" ] && [ -n "$DOCKERHUB_TOKEN" ]; then
          echo "‚úÖ Docker Hub credentials are configured"
          echo "docker-configured=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Docker Hub credentials are missing"
          echo "Please configure DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets"
          echo "docker-configured=false" >> $GITHUB_OUTPUT
          exit 1
        fi
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      if: steps.docker-check.outputs.docker-configured == 'true'
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      if: steps.docker-check.outputs.docker-configured == 'true'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      if: steps.docker-check.outputs.docker-configured == 'true'
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/student-performance-ml:dev
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/student-performance-ml:dev
        cache-to: type=inline

  trigger-jenkins:
    needs: test
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')) ||
      (github.event_name == 'pull_request' && (github.base_ref == 'master' || github.base_ref == 'main'))

    steps:
    - name: Check Jenkins Configuration
      id: jenkins-check
      run: |
        echo "Checking Jenkins configuration..."
        
        # Check if Jenkins secrets are configured
        JENKINS_CONFIGURED="false"
        
        if [ -n "$JENKINS_URL" ] && [ -n "$JENKINS_USER" ] && [ -n "$JENKINS_TOKEN" ] && [ -n "$JENKINS_JOB_NAME" ]; then
          echo "‚úÖ All Jenkins secrets are configured"
          JENKINS_CONFIGURED="true"
        else
          echo "‚ö†Ô∏è Jenkins secrets are missing or incomplete"
          echo "Missing secrets will cause the Jenkins trigger to be skipped"
        fi
        
        echo "jenkins-configured=$JENKINS_CONFIGURED" >> $GITHUB_OUTPUT
      env:
        JENKINS_URL: ${{ secrets.JENKINS_URL }}
        JENKINS_USER: ${{ secrets.JENKINS_USER }}
        JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
        JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }}
    
    - name: Trigger Jenkins Build
      if: steps.jenkins-check.outputs.jenkins-configured == 'true'
      run: |
        echo "üöÄ Triggering Jenkins build..."
        
        # Prepare commit message (handle both push and PR events)
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        if [ -z "$COMMIT_MSG" ] && [ "${{ github.event_name }}" == "pull_request" ]; then
          COMMIT_MSG="${{ github.event.pull_request.title }}"
        fi
        
        # Make the Jenkins API call
        response=$(curl -s -w "%{http_code}" -X POST \
          "${JENKINS_URL}/job/${JENKINS_JOB_NAME}/buildWithParameters" \
          --user "${JENKINS_USER}:${JENKINS_TOKEN}" \
          --data-urlencode "BRANCH_NAME=${{ github.ref_name }}" \
          --data-urlencode "COMMIT_SHA=${{ github.sha }}" \
          --data-urlencode "COMMIT_MESSAGE=${COMMIT_MSG}")
        
        # Extract HTTP status code
        http_code="${response: -3}"
        response_body="${response%???}"
        
        echo "Jenkins API Response Code: $http_code"
        
        # Check if the request was successful
        if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ] || [ "$http_code" -eq 202 ]; then
          echo "‚úÖ Successfully triggered Jenkins job"
        else
          echo "‚ùå Failed to trigger Jenkins job"
          echo "Response body: $response_body"
          exit 1
        fi
      env:
        JENKINS_URL: ${{ secrets.JENKINS_URL }}
        JENKINS_USER: ${{ secrets.JENKINS_USER }}
        JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
        JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }}
    
    - name: Jenkins Configuration Notice
      if: steps.jenkins-check.outputs.jenkins-configured != 'true'
      run: |
        echo "‚ö†Ô∏è Jenkins trigger was skipped due to missing configuration"
        echo ""
        echo "To enable Jenkins integration, configure the following repository secrets:"
        echo "  ‚Ä¢ JENKINS_URL - Your Jenkins server URL (e.g., https://jenkins.example.com)"
        echo "  ‚Ä¢ JENKINS_USER - Jenkins username with API access"
        echo "  ‚Ä¢ JENKINS_TOKEN - Jenkins API token"
        echo "  ‚Ä¢ JENKINS_JOB_NAME - Name of the Jenkins job to trigger"
        echo ""
        echo "Once configured, Jenkins will be automatically triggered on future builds."
    
    - name: Build Summary
      run: |
        echo "üìã Build Summary:"
        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Base Branch: ${{ github.base_ref }}"
        fi
        echo "Commit: ${{ github.sha }}"
        echo "Jenkins Configured: ${{ steps.jenkins-check.outputs.jenkins-configured }}"
